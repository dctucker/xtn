/*@@ Wedit generated application. Written Fri Jan 10 17:07:24 2003
 @@header: c:\xtn\xtnres.h
 @@resources: c:\xtn\xtn.rc
 Do not edit outside the indicated areas */
/*<---------------------------------------------------------------------->*/
/*<---------------------------------------------------------------------->*/
#include <windows.h>
#include <windowsx.h>
#include <commctrl.h>
#include <string.h>
#include "xtnres.h"

#include <stdio.h>
#include <fcntl.h>
#include <io.h>
#include <winsock.h>

/* --- The following code comes from c:\lcc\lib\wizard\dlgbased.tpl. */
/*<---------------------------------------------------------------------->*/

#define AddItem(item) ComboBox_AddString(GetDlgItem(hWndDlg,IDLIST),item)
#define SOCKET_READY 0x420
#define PRNERROR(er) MessageBox(hWndDlg,er,er,0)
#define Dlg(item) GetDlgItem(hWndDlg,item)
#define Send(item) send(connection,item,strlen(item),0)
#define nullStr(item) memset(item,0,sizeof(item))
#define Status(item) SetDlgItemText(hWndDlg,IDSTATUS,item)
#define OnSignal()  WSAAsyncSelect(connection,hWndDlg,SOCKET_READY,FD_READ)
#define OffSignal()	WSAAsyncSelect(connection,hWndDlg,0,0)
#define Cursor(sC) SetCursor(LoadCursor(NULL,MAKEINTRESOURCE(sC)));


/*
Template for a dialog based application. The main procedure for this
template is the DialogFunc below. Modify it to suit your needs.
*/
/* prototype for the dialog box function. */
static BOOL CALLBACK DialogFunc(HWND hwndDlg, UINT msg, WPARAM wParam, LPARAM lParam);
SOCKET CallServer(LPCSTR lpServerName);
void ParseCmd(LPCSTR str);
void Case14(LPCSTR str);
void Resize();
void MoveWin(HWND h, int x, int y);
void UpdateStatic(int vol);
void Connect();
void Disconnect();
void LoadPlaylist();


BOOL NoList,F013;

SOCKET connection;
HWND hWndDlg;
HINSTANCE hInstDlg;
char plTemp[65535];
BOOL PosUpdate,FirstRun;

/*
Win main just registers a class of the same type that the dialog class, and
then calls DialogBox. Then it exits. The return value is the return value of
the dialog procedure.
*/

int APIENTRY WinMain(HINSTANCE hinst, HINSTANCE hinstPrev, LPSTR lpCmdLine, int nCmdShow){
	WNDCLASS wc;

	memset(&wc,0,sizeof(wc));
	wc.lpfnWndProc = DefDlgProc;
	wc.cbWndExtra = DLGWINDOWEXTRA;
	wc.hInstance = hinst;
	wc.hCursor = NULL;//LoadCursor(NULL, IDC_ARROW);
	wc.hbrBackground = (HBRUSH) (COLOR_WINDOW + 1);
	wc.lpszClassName = "xtn";
	RegisterClass(&wc);

	hInstDlg=hinst;

	return DialogBox(hinst, MAKEINTRESOURCE(IDD_MAINDIALOG), NULL, (DLGPROC) DialogFunc);
}

/*
You should add your initialization code here. This function will be called
when the dialog box receives the WM_INITDIALOG message.
*/
static int InitializeApp(HWND hDlg,WPARAM wParam, LPARAM lParam){
	WORD wVersionReq=MAKEWORD(1,1);
	WSADATA wsaData;
	int nRet;
	hWndDlg=hDlg;
	PosUpdate=TRUE;
	FirstRun=TRUE;
	NoList=FALSE;
	F013=FALSE;
	connection=FALSE;

	Button_SetImage(Dlg(IDBPREV),IDBITMAPPREV);
	Button_SetImage(Dlg(IDBPLAY),IDBITMAPPLAY);
	Button_SetImage(Dlg(IDBPAUSE),IDBITMAPPAUSE);
	Button_SetImage(Dlg(IDBSTOP),IDBITMAPSTOP);
	Button_SetImage(Dlg(IDBNEXT),IDBITMAPNEXT);
	Button_SetImage(Dlg(IDBCONNECT),IDBITMAPDISCONNECTED);
	Button_SetImage(Dlg(IDREPEAT),IDBITMAPREPEAT);
	Button_SetImage(Dlg(IDSHUFFLE),IDBITMAPSHUFFLE);

	ScrollBar_SetRange(Dlg(IDVOL),0,100,TRUE);
	nRet=WSAStartup(wVersionReq,&wsaData);
	if(nRet || (wsaData.wVersion!=wVersionReq)){
		PRNERROR("Winsock version error");
		WSACleanup();
		return 0;
	}

	return 1;
}

/*
This is the main function for the dialog. It handles all messages. Do what your
application needs to do here.
*/
static BOOL CALLBACK DialogFunc(HWND hwndDlg, UINT msg, WPARAM wParam, LPARAM lParam){
	char szbuf[1024];
	signed int param1;

//	if(NoList){
//		NoList=FALSE;
//		Status("Sending playlist request...");
//		Send("REQUEST PLAYLIST_TRACKS\n");
//	}

	switch (msg) {
		case WM_INITDIALOG:
			InitializeApp(hwndDlg,wParam,lParam);
			Resize();
			return TRUE;
			break;
		case SOCKET_READY:
			nullStr(szbuf);
			recv(connection,szbuf,sizeof(szbuf),0);
			ParseCmd(szbuf);
			break;
		case WM_SIZE:
			Resize();
			break;
		case WM_COMMAND:
			nullStr(szbuf);
			switch (LOWORD(wParam)) {
				case IDBGO:
					sprintf(szbuf,"JUMP_TO_TRACK %d\n",ComboBox_GetCurSel(Dlg(IDLIST)));
					break;
				case IDBCONNECT:
					Status("Connecting...");
					if(connection==FALSE) Connect();
					else Disconnect();
					break;
				case IDBPREV:
					sprintf(szbuf,"PREV_TRACK\n");
					break;
				case IDBPLAY:
					sprintf(szbuf,"PLAY\n");
					break;
				case IDBPAUSE:
					sprintf(szbuf,"PAUSE\n");
					break;
				case IDBSTOP:
					sprintf(szbuf,"STOP\n");
					break;
				case IDBNEXT:
					sprintf(szbuf,"NEXT_TRACK\n");
					break;
				case IDREPEAT:
					if(Button_GetCheck(Dlg(IDREPEAT))==BST_CHECKED)
						sprintf(szbuf,"REPEAT OFF\n");
					else if(Button_GetCheck(Dlg(IDREPEAT))==BST_UNCHECKED)
						sprintf(szbuf,"REPEAT ON\n");
					break;
				case IDSHUFFLE:
					if(Button_GetCheck(Dlg(IDSHUFFLE))==BST_CHECKED)
						sprintf(szbuf,"SHUFFLE OFF\n");
					else if(Button_GetCheck(Dlg(IDSHUFFLE))==BST_UNCHECKED)
						sprintf(szbuf,"SHUFFLE ON\n");
					break;
				case IDLIST: switch(HIWORD(wParam)){
					case CBN_DBLCLK:
						sprintf(szbuf,"JUMP_TO_TRACK %d\n",ComboBox_GetCurSel(Dlg(IDLIST)));
						break;
				} break;
			}
			Send(szbuf);
			break;
		case WM_HSCROLL:
			param1=ScrollBar_GetPos(Dlg(IDPOS));
			switch(LOWORD(wParam)){
				case SB_PAGELEFT:
					param1-=5;
					break;
				case SB_LINELEFT:
					param1-=2;
					break;
				case SB_LINERIGHT:
					param1+=2;
					break;
				case SB_PAGERIGHT:
					param1+=5;
					break;
				case SB_THUMBTRACK:
					param1=HIWORD(wParam);
					PosUpdate=FALSE;
					break;
				case SB_ENDSCROLL:
					PosUpdate=TRUE;
					break;
			}
			ScrollBar_SetPos(Dlg(IDPOS),param1,TRUE);
			if(PosUpdate){
				sprintf(szbuf,"JUMP_TO_TIME %d\n",param1);
				Send(szbuf);
			}

			break;
		case WM_VSCROLL:
			param1=ScrollBar_GetPos(Dlg(IDVOL));
			switch(LOWORD(wParam)){
				case SB_LINEDOWN:
					if(param1>0) param1-=5;
					break;
				case SB_LINEUP:
					if(param1<100) param1+=5;
					break;
				case SB_THUMBTRACK:
					param1=HIWORD(wParam);
					break;
			}
			nullStr(szbuf);
			sprintf(szbuf,"VOLUME %d\n",param1);
			Send(szbuf);
			ScrollBar_SetPos(Dlg(IDVOL),param1,TRUE);
			UpdateStatic(param1);
			break;
		case WM_CLOSE:
			Disconnect();
			WSACleanup();
			EndDialog(hwndDlg,0);
			return TRUE;
			break;
	}
	return FALSE;
}

SOCKET CallServer(LPCSTR lpServerName){
	IN_ADDR		iaHost;
	LPHOSTENT	lpHostEntry;
//	char Error[128];

	iaHost.s_addr=inet_addr(lpServerName);
	if(iaHost.s_addr == INADDR_NONE){
		lpHostEntry=gethostbyname(lpServerName);
	} else {
		lpHostEntry=gethostbyaddr((const char *)&iaHost,
			sizeof(struct in_addr), AF_INET);
	}
	if(lpHostEntry==NULL){
		Status("Error looking up host");
		return INVALID_SOCKET;
	}

	SOCKET Socket;
	Socket=socket(AF_INET,SOCK_STREAM,IPPROTO_TCP);
	if(Socket==INVALID_SOCKET){
		Status("Error creating socket");
		return INVALID_SOCKET;
	}

	SOCKADDR_IN saServer;
	saServer.sin_port=htons(1586);
	saServer.sin_family=AF_INET;
	saServer.sin_addr=*((LPIN_ADDR)*lpHostEntry->h_addr_list);

	int nRet;
	nRet=connect(Socket,(LPSOCKADDR)&saServer,sizeof(SOCKADDR_IN));
	if(nRet==SOCKET_ERROR){
		closesocket(Socket);
		Status("Error connecting to port");
		return INVALID_SOCKET;
	}
	return Socket;

/*	sprintf(szBuffer,"PLAY\n");
//	AddItem(szBuffer);
//	nRet=send(Socket,szBuffer,strlen(szBuffer),0);
//	if(nRet==SOCKET_ERROR){
//		closesocket(Socket);
//		PRNERROR("send()");
//		return INVALID_SOCKET;
//	}
//	while(nRet>=0){
//	nRet = recv(Socket, szBuffer, sizeof(szBuffer), 0);
//	AddItem(szBuffer);
//	static char szBuffer[256];
//	memset(szBuffer,0,sizeof(szBuffer));
//	strcat(szBuffer,"PLAY\r\nEXIT\r\n");
//	nRet=send(Socket,szBuffer,strlen(szBuffer),0);
//	closesocket(Socket);
*/
}

void ParseCmd(LPCSTR str){
	int cmd;
	int param1,param2;
	HWND hItem;
	char szbuf[1024];
	nullStr(szbuf);
	sscanf(str,"%d %s",&cmd,szbuf);
	switch(cmd){
		case  0:	// Welcome
			Send("REQUEST PLAYLIST\n");
			break;
		case  1:	// Authentication / failure
			break;
		case  2:	// Unknown command
			break;
		case  3: 	// Too few arguments
			break;
		case  4:	// Unrecognized/invalid argument
			break;
		case  5:	// Last request OK
			break;
		case 10:{	// Player status "Playing vol Shuffle Repeat"
			char szshuf[12], szrepeat[12];
			int r,s;
			nullStr(szrepeat);
			nullStr(szshuf);
			sscanf(str,"010 %s %d %s %s",szbuf,&param1,szshuf,szrepeat);
			ScrollBar_SetPos(Dlg(IDVOL),param1,TRUE);
			r=strcmp(szrepeat,"SINGLE")==0 ? BST_UNCHECKED : BST_CHECKED;
			s=strcmp(szshuf,"NORMAL\0\0")  ==0 ? BST_UNCHECKED : BST_CHECKED;
			Button_SetCheck(Dlg(IDREPEAT),r);
			Button_SetCheck(Dlg(IDSHUFFLE),s);
			UpdateStatic(param1);
			} break;
		case 11:	// Current track info "song path len kb hz ch
			break;
		case 12:{	// Current playlist info "# ##"
			sscanf(str,"012 %d %d",&param1,&param2);
			ComboBox_SetCurSel(Dlg(IDLIST),param1);
			if((param2) != ComboBox_GetCount(Dlg(IDLIST))){
				ComboBox_ResetContent(Dlg(IDLIST));
				LoadPlaylist();
			}
			}break;
		case 13:	// Track playing update "hms hms"
//			F013=TRUE;
			if(PosUpdate){
				int h,m,s,lh,lm,ls;
				sscanf(str,"013 %d:%d:%d %d:%d:%d",&h,&m,&s,&lh,&lm,&ls);
				m+=h*60; s+=m*60;
				lm+=lh*60; ls+=lm*60;
				ScrollBar_SetRange(Dlg(IDPOS),0,ls,FALSE);
				ScrollBar_SetPos(Dlg(IDPOS),s,TRUE);
			}
			break;
		case 14:
			NoList=FALSE;
			Status("Reading playlist");
			Case14(str);
			break;
		case 15:	//
			break;
	}
//	AddItem(szbuf);
}

void Case14(LPCSTR str){
	char szbuf[512];
	char buf1[512], buf2[512];
	nullStr(szbuf);
	nullStr(buf1);
	nullStr(buf2);
	int t;

	Cursor(IDC_WAIT);

	strcat(plTemp,str);
	sprintf(szbuf,"Length: %d",strlen(plTemp));
	Status(szbuf);
	nullStr(szbuf);
	if(strstr(plTemp,"014 END")!=NULL){
		char *tok;
		char t1[128],t2[128],t3[128];
		nullStr(t1); nullStr(t2); nullStr(t3);
		int i;
		i=1;

		for(tok=strtok(plTemp,"\n"); tok!=NULL; tok=strtok(NULL,"\n")){
			int n;
			nullStr(t1); nullStr(t2); nullStr(t3);
			sscanf(tok,"014 %s \"%[^\"]\" \"%[^\"]\"",t1,t2,t3);
			if(t2[0]!=0){
				sprintf(t3,"%d. %s",atoi(t1)+1,t2);
				AddItem(t3);
			}
			i++;
		}
		Status("Ready.");
		Send("REQUEST PLAYLIST\n");
	} else if(strstr(plTemp,"014 START")!=NULL){
		ComboBox_ResetContent(Dlg(IDLIST));
		sprintf(plTemp,"");
	}
}

void Resize(){
	RECT r;
	int SPACE=70;
	int TOP;
	GetClientRect(hWndDlg,&r);
	TOP=r.bottom-SPACE;
	MoveWindow(Dlg(IDLIST),4,4,r.right-8,r.bottom-SPACE-7,TRUE);
	MoveWin(Dlg(IDBPREV),	10,	TOP);
	MoveWin(Dlg(IDBPLAY),	40,	TOP);
	MoveWin(Dlg(IDBPAUSE),	70,	TOP);
	MoveWin(Dlg(IDBSTOP),	100,TOP);
	MoveWin(Dlg(IDBNEXT),	130,TOP);
	MoveWin(Dlg(IDVOL)	,	169,TOP-2);
	MoveWin(Dlg(IDPBORDER),	160,TOP-2);
	MoveWin(Dlg(IDBCONNECT),r.right-45,TOP);
	MoveWin(Dlg(IDSHUFFLE), 190,TOP);
	MoveWin(Dlg(IDREPEAT),	215,TOP);
	MoveWindow(Dlg(IDSTATUS),2,r.bottom-18,r.right-4,18,TRUE);
	MoveWindow(Dlg(IDPOS),12,TOP+30,r.right-24,14,TRUE);
	UpdateStatic(ScrollBar_GetPos(Dlg(IDVOL)));
}
void MoveWin(HWND h, int x, int y){
	RECT r;
	GetClientRect(h,&r);
	MoveWindow(h,x,y,r.right,r.bottom,TRUE);
}

void UpdateStatic(int vol){
	RECT r,w;
	int hgt;
	int x,y;
	GetWindowRect(Dlg(IDPBORDER),&r);
	ScreenToClient(hWndDlg,&r);
	x=r.left;
	y=r.top;
	GetClientRect(Dlg(IDPBORDER),&r);
	hgt=(r.bottom*vol/100)-2;
	MoveWindow(Dlg(IDPFILL),x+1,y+(r.bottom-hgt-1),r.right-2,hgt,TRUE);
}

void LoadPlaylist(){
//	char szbuf[1024];
	char data[65535];
	char status[32];
	unsigned long sz,szprev;
	int len;
	int i;
	SYSTEMTIME time,ctime;
	GetSystemTime(&time);


	nullStr(data);
	OffSignal();
	Cursor(IDC_WAIT);
	i=0;
	szprev=0;

	Send("REQUEST PLAYLIST_TRACKS\n");
	while(1){
		ioctlsocket(connection,FIONREAD,&sz);
		if(sz>szprev){
			recv(connection,data,sizeof(data),MSG_PEEK);
			len=strlen(data);
			szprev=sz;
			i++;
			sprintf(status,"Length: %d, Passes: %d, szprev=%d",len,i,sz);
			//Status(status);
		}
		if(strstr(data,"\n005 ")!=NULL) break;
		GetSystemTime(&ctime);
		if((ctime.wSecond - time.wSecond) %5==4) {
			Disconnect();
			Status("Timed out reading playlist");
			return;
		}
	}

	recv(connection,data,sizeof(data),0);

	char *tok;
	char t1[128],t2[128],t3[128];
	nullStr(t1); nullStr(t2); nullStr(t3);
	i=1;

	for(tok=strtok(data,"\n"); tok!=NULL; tok=strtok(NULL,"\n")){
		int n;
		nullStr(t1); nullStr(t2); nullStr(t3);
		sscanf(tok,"014 %s \"%[^\"]\" \"%[^\"]\"",t1,t2,t3);
		if(t2[0]!=0){
			sprintf(t3,"%d. %s",atoi(t1)+1,t2);
			AddItem(t3);
		}
		i++;
	}
	strcat(status,", done");
	Status(status);


	Cursor(IDC_ARROW);
	OnSignal();
	Send("REQUEST PLAYLIST\n");
}

void Connect(){
	Cursor(IDC_WAIT);
	connection=CallServer("whiteguy.ath.cx");
	if(connection==INVALID_SOCKET){
		Status("Error looking up host");
		connection=FALSE;
		return;
	}
	Status("Connected");
	Button_SetImage(Dlg(IDBCONNECT),IDBITMAPCONNECTED);


	OnSignal();
	Cursor(IDC_ARROW);
}
void Disconnect(){
	Status("Hanging up...");
	Send("EXIT\n");
	closesocket(connection);
	connection=FALSE;
	Status("Disconnected");
	Button_SetImage(Dlg(IDBCONNECT),IDBITMAPDISCONNECTED);
	ComboBox_ResetContent(Dlg(IDLIST));
}
